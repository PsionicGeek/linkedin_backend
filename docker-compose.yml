version: "3.8"

services:
  kafka:
    image: docker.io/bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    networks:
      - linkedin-network
    environment:
      # Kafka configuration
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      #Listener configuration
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

  kafbat-ui:
    container_name: kafbat-ui
    image: ghcr.io/kafbat/kafka-ui
    ports:
      - "8090:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_KSQLDBSERVER: http://ksqldb0:8088
    networks:
        - linkedin-network


  notifications-db:
    image: postgres:latest
    container_name: notifications-db
    networks:
      - linkedin-network
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: notificationdb
    volumes:
      - notifications-db-data:/var/lib/postgresql/data

  posts-db:
    image: postgres:latest
    container_name: posts-db
    networks:
      - linkedin-network
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postdb
    volumes:
      - posts-db-data:/var/lib/postgresql/data

  users-db:
    image: postgres:latest
    container_name: users-db
    networks:
      - linkedin-network
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: usersdb
    volumes:
      - users-db-data:/var/lib/postgresql/data

  connections-db:
    image: neo4j
    container_name: connections-db
    networks:
      - linkedin-network
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - connections-db-data:/data
    environment:
      - NEO4J_AUTH=neo4j/password

  discovery-server:
    image: officialravi22/linkedin-app/discovery-server
    container_name: discovery-server
    networks:
      - linkedin-network
    ports:
      - "8761:8761"

  posts-service:
    image: officialravi22/linkedin-app/posts-service
    container_name: posts-service
    networks:
      - linkedin-network
    depends_on:
      - discovery-server
      - posts-db
      - kafka
  users-service:
    image: officialravi22/linkedin-app/users-service
    container_name: users-service
    networks:
      - linkedin-network
    depends_on:
      - discovery-server
      - users-db


  notification-service:
    image: officialravi22/linkedin-app/notifications-service
    container_name: notification-service
    networks:
      - linkedin-network
    depends_on:
      - discovery-server
      - notifications-db
      - kafka

  connections-service:
    image: officialravi22/linkedin-app/connections-service
    container_name: connections-service
    networks:
      - linkedin-network
    depends_on:
      - discovery-server
      - connections-db
      - kafka

  api-gateway:
    image: officialravi22/linkedin-app/api-gateway
    container_name: api-gateway
    networks:
      - linkedin-network
    depends_on:
      - discovery-server
    ports:
      - "8080:8080"






networks:
  linkedin-network:

volumes:
    kafka_data:
    notifications-db-data:
    posts-db-data:
    users-db-data:
    connections-db-data:

